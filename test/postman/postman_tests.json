{
	"info": {
		"_postman_id": "71f1be48-7a75-491e-a94d-8fe8c4171bae",
		"name": "PokemonApp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Type effectiveness",
			"item": [
				{
					"name": "Gen 1",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Gen 2",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 5 resistances\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dark Pokemon Test",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Bulbasaur&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Bulbasaur"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Steel Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7880122-648e-46bf-82fa-edc8202c1223",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superweaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 8 resistances\", () => {",
											"    let expected = 8;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 types\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magnemite&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magnemite"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Gen 3",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 5 resistances\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dark Pokemon Test",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Bulbasaur&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Bulbasaur"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Steel Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7880122-648e-46bf-82fa-edc8202c1223",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superweaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 8 resistances\", () => {",
											"    let expected = 8;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 types\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magnemite&generation=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magnemite"
										},
										{
											"key": "generation",
											"value": "3"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Gen 4",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 5 resistances\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dark Pokemon Test",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Bulbasaur&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Bulbasaur"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Steel Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7880122-648e-46bf-82fa-edc8202c1223",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superweaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 8 resistances\", () => {",
											"    let expected = 8;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 types\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magnemite&generation=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magnemite"
										},
										{
											"key": "generation",
											"value": "4"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Gen 5",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 5 resistances\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dark Pokemon Test",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Bulbasaur&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Bulbasaur"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Steel Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7880122-648e-46bf-82fa-edc8202c1223",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superweaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 8 resistances\", () => {",
											"    let expected = 8;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 types\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magnemite&generation=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magnemite"
										},
										{
											"key": "generation",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Gen 6",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 6 resistances\", () => {",
											"    let expected = 6;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 5 resistances\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dark Pokemon Test",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Bulbasaur&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Bulbasaur"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Steel Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7880122-648e-46bf-82fa-edc8202c1223",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superweaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 9 resistances\", () => {",
											"    let expected = 9;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 types\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magnemite&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magnemite"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fairy Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddff7954-971c-40d9-af88-369f20133733",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Jigglypuff&generation=6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Jigglypuff"
										},
										{
											"key": "generation",
											"value": "6"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Gen 7",
					"item": [
						{
							"name": "Normal Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a49f18e6-f31f-44d1-be74-0d9002b5d08c",
										"exec": [
											"pm.test(\"Should have 1 weakness\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 resistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Eevee&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Eevee"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086cd56c-7bc1-4aa0-8b6e-806c0012c6a7",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 6 resistances\", () => {",
											"    let expected = 6;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magmar&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magmar"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Water Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb88e08a-94d9-41ae-a5b5-b055f81b404c",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Blastoise&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Blastoise"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Electric Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bbae230-df10-4531-b238-db7c3eb69499",
										"exec": [
											"pm.test(\"Should have 1 weaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Electabuzz&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Electabuzz"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Grass Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63f10213-f0ab-4785-ac07-a1bc79da50be",
										"exec": [
											"pm.test(\"Should have 5 weaknesses\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Tangela&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Tangela"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ice Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d23d766a-4cc7-45bf-b140-6fb78d5adaf2",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 resistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistance\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Lapras&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Lapras"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fighting Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78f2e799-c26c-40e9-85db-c9258bc02097",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Hitmonchan&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Hitmonchan"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Poison Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de5c30ef-650f-4eac-8ef3-068b90db8f4a",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 5 resistances\", () => {",
											"    let expected = 5;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Nidoran♀&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Nidoran♀"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ground Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0ef8f9a-624f-4819-a348-e414c3523b0c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dugtrio&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dugtrio"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Flying Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f6163f-3456-461f-8eae-4a119201add5",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pidgey&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pidgey"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Psychic Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b4bd1c-a518-4f43-a02f-bbda2f8a3bb3",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Abra&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Abra"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bug Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c58ab51c-ffb3-4395-9595-fcd9c8145a1c",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 3 resistances\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Pinsir&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Pinsir"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Rock Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25762c14-7701-4857-b431-14e98928fc18",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superweaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superresistances\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 type\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Onix&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Onix"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ghost Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38ee9da-5699-4f95-8850-f77af6cd2978",
										"exec": [
											"pm.test(\"Should have 4 weaknesses\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Gastly&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Gastly"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dragon Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5bea449-51d3-43d7-b743-8b0ccd222a92",
										"exec": [
											"pm.test(\"Should have 3 weaknesses\", () => {",
											"    let expected = 3;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 4 resistances\", () => {",
											"    let expected = 4;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 0 types\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Water type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Water\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Dragonair&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Dragonair"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Dark Pokemon Test",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Bulbasaur&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Bulbasaur"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Steel Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7880122-648e-46bf-82fa-edc8202c1223",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 1 superweaknesses\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 9 resistances\", () => {",
											"    let expected = 9;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 superresistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 1 types\", () => {",
											"    let expected = 1;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fire type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fire\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Fighting type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Fighting\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super weak to Ground type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superweaknesses;",
											"    let expected = \"Ground\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Normal type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Normal\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Electric type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Electric\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Grass type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Grass\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Ice type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Ice\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Psychic type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Psychic\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Rock type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Rock\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be super resistant to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Fairy type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Fairy\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be super resistant to Flying type pokemon\", () => {",
											"    let weaknesses = pm.response.json().superresistances;",
											"    let expected = \"Flying\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Magnemite&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Magnemite"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fairy Pokemon Test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddff7954-971c-40d9-af88-369f20133733",
										"exec": [
											"pm.test(\"Should have 2 weaknesses\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().weaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superweaknesses\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superweaknesses.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 2 resistances\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().resistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should have 0 superresistances\", () => {",
											"    let expected = 0;",
											"    let actual = pm.response.json().superresistances.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by 2 types\", () => {",
											"    let expected = 2;",
											"    let actual = pm.response.json().unaffected.length",
											"    pm.expect(actual).to.equal(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Poison type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Poison\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be weak to Steel type pokemon\", () => {",
											"    let weaknesses = pm.response.json().weaknesses;",
											"    let expected = \"Steel\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be resistant to Bug type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Bug\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"",
											"pm.test(\"Should be resistant to Dark type pokemon\", () => {",
											"    let weaknesses = pm.response.json().resistances;",
											"    let expected = \"Dark\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Dragon type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Dragon\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});",
											"",
											"pm.test(\"Should be unaffected by Ghost type pokemon\", () => {",
											"    let weaknesses = pm.response.json().unaffected;",
											"    let expected = \"Ghost\";",
											"    pm.expect(weaknesses).to.include(expected);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:1234/pokemon?name=Jigglypuff&generation=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "1234",
									"path": [
										"pokemon"
									],
									"query": [
										{
											"key": "name",
											"value": "Jigglypuff"
										},
										{
											"key": "generation",
											"value": "7"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Input Checking",
			"item": [
				{
					"name": "Pokemon Query - Missing Name",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:1234/pokemon?generation=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "1234",
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "generation",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pokemon Query - Missing Generation",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:1234/pokemon?name=Pikachu",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "1234",
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "name",
									"value": "Pikachu"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pokemon Query - Invalid Generation",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:1234/pokemon?name=Pikachu&generation=wrong",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "1234",
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "name",
									"value": "Pikachu"
								},
								{
									"key": "generation",
									"value": "wrong"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pokemon Query - Lowercase Name",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:1234/pokemon?name=pikachu&generation=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "1234",
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "name",
									"value": "pikachu"
								},
								{
									"key": "generation",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pokemon Query - Invalid Pokemon",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:1234/pokemon?name=invalildpokemon&generation=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "1234",
							"path": [
								"pokemon"
							],
							"query": [
								{
									"key": "name",
									"value": "invalildpokemon"
								},
								{
									"key": "generation",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}